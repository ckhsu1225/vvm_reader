Add vorticity centering and variable disambiguation for staggered grid

This commit implements two major features to enhance VVM Reader's handling
of staggered grid variables and resolve variable naming conflicts:

## 1. Vorticity Variable Centering (zeta, eta, xi)

Extends staggered variable centering to support vorticity components which
are staggered in multiple dimensions simultaneously.

### Staggered Grid Configuration
- zeta: staggered in x,y directions (i+0.5, j+0.5, k)
- eta: staggered in x,z directions (i+0.5, j, k+0.5)
- xi: staggered in y,z directions (i, j+0.5, k+0.5)

### Implementation Details
- Add VORTICITY_VARIABLES and STAGGER_CONFIG to define stagger patterns
- Refactor center_staggered_winds() ‚Üí center_staggered_variables()
- Implement _center_single_direction() for 1D stagger (u, v, w)
- Implement _center_dual_direction() for 2D stagger (zeta, eta, xi)
- Use 4-point averaging for dual-direction centering
- Apply NaN for vorticity inside terrain (physically undefined)

### Boundary Conditions
- Horizontal (x,y): periodic for full domain, NaN for boundaries
- Vertical (z): always NaN at bottom boundary for all variables
- Proper halo extension for x, y, z directions

## 2. Variable Name Disambiguation System

Resolves conflicts where variable names appear in multiple groups with
different physical meanings (e.g., eta in C.LandSurface vs L.Dynamic).

### Problem
- eta in C.LandSurface: latent heat flux (2D, W/m¬≤)
- eta in L.Dynamic: vorticity component (3D, s‚Åª¬π)
- Manifest incorrectly merged them into one entry

### Solution
- Add VARIABLE_GROUP_PRIORITY configuration for explicit priority rules
- Implement 3-level group selection in resolve_groups_to_load():
  1. Check VARIABLE_GROUP_PRIORITY for explicit rules
  2. For staggered variables, prefer 3D groups (with 'lev' dimension)
  3. Fallback to first available group
- Automatically selects correct version when loading by variable name

## Files Modified

- core/config.py: Add vorticity configs and disambiguation settings
- processing/terrain.py: Refactor centering logic for all staggered variables
- io/dataset_loader.py: Update halo extension for vorticity variables
- io/file_utils.py: Implement smart group resolution with priorities
- processing/__init__.py: Update exports for new functions
- __init__.py: Export new configuration constants
- coordinates/spatial/slicing.py: Minor documentation updates

## Documentation

- VORTICITY_CENTERING_IMPLEMENTATION.md: Complete technical specification
- ETA_DISAMBIGUATION_SOLUTION.md: Variable conflict resolution guide

## Usage Example

```python
import vvm_reader as vvm

# Automatic disambiguation - eta loaded from L.Dynamic (vorticity)
ds = vvm.open_vvm_dataset(
    sim_dir,
    variables=["u", "v", "w", "zeta", "eta", "xi"],
    processing_options=vvm.ProcessingOptions(
        center_staggered=True,  # Center all staggered variables
        center_suffix="_c"
    )
)

# Centered vorticity variables available as zeta_c, eta_c, xi_c
```

## Backward Compatibility

- Existing code continues to work unchanged
- New priority rules only affect ambiguous variable names

## Testing

- Syntax validation: All modified files compile successfully
- Configuration verification: New constants properly defined
- Function signatures: All parameters correctly specified

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>
